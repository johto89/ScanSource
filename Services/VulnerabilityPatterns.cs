using SecurityScanner.Models;
using System.Text.RegularExpressions;

namespace SecurityScanner.Services
{
    public class VulnerabilityPatterns
    {
        public Dictionary<string, VulnerabilityPattern> GetAllPatterns()
        {
            var patterns = new Dictionary<string, VulnerabilityPattern>();

            // iOS Patterns from CodeVulCheck
            patterns.Add("iOS Sensitive Information Exposure", new VulnerabilityPattern
            {
                Category = "iOS Sensitive Information Exposure",
                Patterns = new List<PatternConfig>
                {
                    new() { Pattern = @"apikey\s*=\s*['""][0-9a-zA-Z\-]{20,}['""]", Severity = "HIGH", CweId = "CWE-200", Description = "API key exposed in code", Recommendation = "Store API keys in secure configuration", Languages = new List<string> { "swift", "objc" } },
                    new() { Pattern = @"api_key\s*=\s*['""][0-9a-zA-Z\-]{20,}['""]", Severity = "HIGH", CweId = "CWE-200", Description = "API key exposed in code", Recommendation = "Store API keys in secure configuration", Languages = new List<string> { "swift", "objc" } },
                    new() { Pattern = @"password\s*=\s*['""][^'""]]+['""]", Severity = "CRITICAL", CweId = "CWE-798", Description = "Hardcoded password", Recommendation = "Use secure credential storage", Languages = new List<string> { "swift", "objc" } },
                    new() { Pattern = @"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b", Severity = "MEDIUM", CweId = "CWE-200", Description = "Email address in code", Recommendation = "Remove hardcoded email addresses", Languages = new List<string> { "swift", "objc" } }
                },
                WhitelistPatterns = new List<string> { "validateApiKey", "checkCredentials", "testEnvironment", "dummyKey" }
            });

            // Android Patterns
            patterns.Add("Android Intent and WebView", new VulnerabilityPattern
            {
                Category = "Android Intent and WebView",
                Patterns = new List<PatternConfig>
                {
                    new() { Pattern = @"Intent\s*=\s*[^""]+", Severity = "MEDIUM", CweId = "CWE-926", Description = "Intent handling vulnerability", Recommendation = "Validate intents and use explicit intents", Languages = new List<string> { "java", "kotlin" } },
                    new() { Pattern = @"startActivity\s*\([^)]*\)", Severity = "MEDIUM", CweId = "CWE-926", Description = "Unsafe activity start", Recommendation = "Validate intent data before starting activities", Languages = new List<string> { "java", "kotlin" } },
                    new() { Pattern = @"webview\s*\.loadUrl\s*\([^)]*\)", Severity = "HIGH", CweId = "CWE-79", Description = "WebView URL loading vulnerability", Recommendation = "Validate URLs before loading in WebView", Languages = new List<string> { "java", "kotlin" } },
                    new() { Pattern = @"webview\s*\.setJavaScriptEnabled\s*=\s*true", Severity = "MEDIUM", CweId = "CWE-79", Description = "JavaScript enabled in WebView", Recommendation = "Disable JavaScript if not needed or implement proper security measures", Languages = new List<string> { "java", "kotlin" } }
                },
                WhitelistPatterns = new List<string> { "validateIntent", "sanitizeInput", "checkOrigin", "secureWebView" }
            });

            // Financial Security Patterns
            patterns.Add("Parameter Manipulation", new VulnerabilityPattern
            {
                Category = "Parameter Manipulation",
                Patterns = new List<PatternConfig>
                {
                    new() { Pattern = @"(price|amount|quantity|currency)\s*=\s*\$_(GET|POST|REQUEST)", Severity = "CRITICAL", CweId = "CWE-20", Description = "Direct parameter manipulation vulnerability", Recommendation = "Validate and sanitize all financial parameters server-side", Languages = new List<string> { "php" } },
                    new() { Pattern = @"<input[^>]*type=['""]hidden['""][^>]*name=['""](?:price|amount|total)['""]", Severity = "HIGH", CweId = "CWE-20", Description = "Hidden field containing financial data vulnerable to manipulation", Recommendation = "Move financial calculations to server-side", Languages = new List<string> { "html" } },
                    new() { Pattern = @"Request\.(QueryString|Form)\[""(price|amount|quantity|currency)""\]", Severity = "CRITICAL", CweId = "CWE-20", Description = "Direct parameter manipulation in .NET", Recommendation = "Validate and sanitize all financial parameters", Languages = new List<string> { "csharp" } }
                }
            });

            patterns.Add("Race Condition", new VulnerabilityPattern
            {
                Category = "Race Condition",
                Patterns = new List<PatternConfig>
                {
                    new() { Pattern = @"(balance|amount|quantity)\s*[<>=!]+\s*\w+.*\n.*\1\s*[=+-]", Severity = "HIGH", CweId = "CWE-367", Description = "Potential TOCTOU race condition in financial calculation", Recommendation = "Use atomic operations or proper locking mechanisms", Languages = new List<string> { "all" } }
                }
            });

            // IDOR Patterns
            patterns.Add("Direct ID Access", new VulnerabilityPattern
            {
                Category = "Direct ID Access",
                Patterns = new List<PatternConfig>
                {
                    new() { Pattern = @"\.Find\(\s*\w+\s*\)", Severity = "HIGH", CweId = "CWE-639", Description = "Direct object access without authorization check", Recommendation = "Implement proper authorization checks", Languages = new List<string> { "csharp" } },
                    new() { Pattern = @"\$_GET\[['""]?\w*[Ii]d\w*['""]?\]", Severity = "HIGH", CweId = "CWE-639", Description = "Direct ID access from GET parameter", Recommendation = "Implement authorization checks for object access", Languages = new List<string> { "php" } },
                    new() { Pattern = @"request\.getParameter\(['""]?\w*[Ii]d\w*['""]?\)", Severity = "HIGH", CweId = "CWE-639", Description = "Direct ID access from request parameter", Recommendation = "Validate user permissions for object access", Languages = new List<string> { "java" } },
                    new() { Pattern = @"req\.params\.\w*[Ii]d\w*", Severity = "HIGH", CweId = "CWE-639", Description = "Direct ID access from request parameters", Recommendation = "Implement proper authorization middleware", Languages = new List<string> { "javascript", "typescript" } }
                },
                WhitelistPatterns = new List<string> { "CheckOwnership", "ValidateAccess", "authorize", "permission" }
            });

            // XXE Patterns
            patterns.Add("XXE Vulnerability", new VulnerabilityPattern
            {
                Category = "XXE Vulnerability",
                Patterns = new List<PatternConfig>
                {
                    new() { Pattern = @"XmlReaderSettings", Severity = "HIGH", CweId = "CWE-611", Description = "XML parsing without proper security settings", Recommendation = "Disable DTD processing and external entities", Languages = new List<string> { "csharp" } },
                    new() { Pattern = @"DocumentBuilderFactory", Severity = "HIGH", CweId = "CWE-611", Description = "XML parsing vulnerability", Recommendation = "Disable external entity processing", Languages = new List<string> { "java" } },
                    new() { Pattern = @"simplexml_load", Severity = "HIGH", CweId = "CWE-611", Description = "XML parsing without security controls", Recommendation = "Use libxml_disable_entity_loader(true)", Languages = new List<string> { "php" } },
                    new() { Pattern = @"<!ENTITY", Severity = "CRITICAL", CweId = "CWE-611", Description = "XML entity definition found", Recommendation = "Review XML entity usage for XXE vulnerabilities", Languages = new List<string> { "xml" } }
                },
                WhitelistPatterns = new List<string> { "DtdProcessing.Prohibit", "XmlResolver = null", "defusedxml" }
            });

            // Open Redirect Patterns
            patterns.Add("Open Redirect", new VulnerabilityPattern
            {
                Category = "Open Redirect",
                Patterns = new List<PatternConfig>
                {
                    new() { Pattern = @"window\.location(?:\.href|\.replace|\.assign)?\s*[=\(]", Severity = "MEDIUM", CweId = "CWE-601", Description = "Client-side redirect vulnerability", Recommendation = "Validate redirect URLs against whitelist", Languages = new List<string> { "javascript" } },
                    new() { Pattern = @"Response\.Redirect\s*\(", Severity = "MEDIUM", CweId = "CWE-601", Description = "Server-side redirect vulnerability", Recommendation = "Validate redirect URLs", Languages = new List<string> { "csharp" } },
                    new() { Pattern = @"header\s*\(\s*[`'""]Location:\s*[`'""]", Severity = "MEDIUM", CweId = "CWE-601", Description = "PHP redirect vulnerability", Recommendation = "Validate redirect destinations", Languages = new List<string> { "php" } }
                },
                WhitelistPatterns = new List<string> { "LocalRedirect", "ValidateUrl", "IsLocalUrl" }
            });

            // SQL Injection Patterns
            patterns.Add("SQL Injection", new VulnerabilityPattern
            {
                Category = "SQL Injection",
                Patterns = new List<PatternConfig>
                {
                    new() { Pattern = @"(SELECT|INSERT|UPDATE|DELETE).*\+.*(?:amount|price|balance)", Severity = "CRITICAL", CweId = "CWE-89", Description = "Potential SQL injection in financial query", Recommendation = "Use parameterized queries", Languages = new List<string> { "all" } },
                    new() { Pattern = @"CommandText.*\+.*\$_(GET|POST)", Severity = "CRITICAL", CweId = "CWE-89", Description = "SQL injection vulnerability in .NET", Recommendation = "Use SqlParameter for all user inputs", Languages = new List<string> { "csharp" } }
                }
            });

            // PowerShell Patterns
            patterns.Add("PowerShell Execution", new VulnerabilityPattern
            {
                Category = "PowerShell Execution",
                Patterns = new List<PatternConfig>
                {
                    new() { Pattern = @"Invoke-Expression", Severity = "HIGH", CweId = "CWE-94", Description = "Use of Invoke-Expression can lead to code injection", Recommendation = "Avoid Invoke-Expression; use safer alternatives", Languages = new List<string> { "powershell" } },
                    new() { Pattern = @"iex\s", Severity = "HIGH", CweId = "CWE-94", Description = "Use of iex (Invoke-Expression alias) can lead to code injection", Recommendation = "Avoid iex; use safer alternatives", Languages = new List<string> { "powershell" } },
                    new() { Pattern = @"Start-Process.*-NoNewWindow.*-PassThru", Severity = "MEDIUM", CweId = "CWE-78", Description = "Process execution without proper validation", Recommendation = "Validate and sanitize process arguments", Languages = new List<string> { "powershell" } },
                    new() { Pattern = @"cmd\s*/c", Severity = "MEDIUM", CweId = "CWE-78", Description = "Command execution through cmd", Recommendation = "Use PowerShell cmdlets instead of cmd", Languages = new List<string> { "powershell" } }
                }
            });

            patterns.Add("PowerShell Input Validation", new VulnerabilityPattern
            {
                Category = "PowerShell Input Validation",
                Patterns = new List<PatternConfig>
                {
                    new() { Pattern = @"\$args\[\d+\](?!\s*-match|\s*-like|\s*-eq)", Severity = "MEDIUM", CweId = "CWE-20", Description = "Direct use of command line arguments without validation", Recommendation = "Validate command line arguments before use", Languages = new List<string> { "powershell" } },
                    new() { Pattern = @"Read-Host.*-AsSecureString.*ConvertFrom-SecureString", Severity = "MEDIUM", CweId = "CWE-319", Description = "Converting secure string back to plain text", Recommendation = "Keep sensitive data as SecureString", Languages = new List<string> { "powershell" } },
                    new() { Pattern = @"Get-Content.*\|\s*Out-String.*\|\s*Invoke-Expression", Severity = "HIGH", CweId = "CWE-94", Description = "Reading file content and executing as code", Recommendation = "Validate file content before execution", Languages = new List<string> { "powershell" } }
                }
            });

            patterns.Add("PowerShell Network Security", new VulnerabilityPattern
            {
                Category = "PowerShell Network Security",  
                Patterns = new List<PatternConfig>
                {
                    new() { Pattern = @"Invoke-WebRequest.*-SkipCertificateCheck", Severity = "MEDIUM", CweId = "CWE-295", Description = "Skipping certificate validation", Recommendation = "Validate SSL certificates for security", Languages = new List<string> { "powershell" } },
                    new() { Pattern = @"Invoke-RestMethod.*-SkipCertificateCheck", Severity = "MEDIUM", CweId = "CWE-295", Description = "Skipping certificate validation in REST call", Recommendation = "Validate SSL certificates for security", Languages = new List<string> { "powershell" } },
                    new() { Pattern = @"http://[^""'\s]+", Severity = "LOW", CweId = "CWE-319", Description = "Use of unencrypted HTTP protocol", Recommendation = "Use HTTPS for secure communication", Languages = new List<string> { "powershell" } },
                    new() { Pattern = @"ConvertTo-SecureString.*-AsPlainText.*-Force", Severity = "MEDIUM", CweId = "CWE-798", Description = "Converting plain text to secure string", Recommendation = "Read sensitive data securely instead of hardcoding", Languages = new List<string> { "powershell" } }
                }
            });

            patterns.Add("PowerShell Regular Expression", new VulnerabilityPattern
            {
                Category = "PowerShell Regular Expression", 
                Patterns = new List<PatternConfig>
                {
                    new() { Pattern = @"-match\s+\$\w+(?!\s*-and|\s*-or)", Severity = "LOW", CweId = "CWE-185", Description = "Regular expression match without proper validation", Recommendation = "Validate regex patterns to prevent ReDoS", Languages = new List<string> { "powershell" } },
                    new() { Pattern = @"\[regex\]::Match\([^)]+\$\w+", Severity = "LOW", CweId = "CWE-185", Description = "Direct regex match with user input", Recommendation = "Validate and sanitize regex input", Languages = new List<string> { "powershell" } }
                }
            });

            return patterns;
        }

        public List<string> GetSafePatterns()
        {
            return new List<string>
            {
                // C#/.NET Safe Patterns
                @"\.Where\(.*UserId\s*==.*\)",
                @"\.Where\(.*OwnerId\s*==.*\)",
                @"\[Authorize\]",
                @"GetCurrentUserId\(\)",
                @"CheckOwnership\(",
                @"ValidateAccess\(",
                @"protector\.Protect\(",
                @"IDataProtector",
                @"Guid\.NewGuid\(\)",

                // PHP Safe Patterns
                @"session_id\(\)",
                @"\$_SESSION\[['""]user_id['""]\]",
                @"current_user_id\(\)",
                @"check_ownership\(",
                @"user_can_access\(",

                // Java Safe Patterns
                @"getCurrentUser\(\)",
                @"SecurityContextHolder\.getContext\(\)",
                @"@PreAuthorize",
                @"@Secured",
                @"hasRole\(",
                @"UUID\.randomUUID\(\)",

                // Python Safe Patterns
                @"request\.user\.id",
                @"current_user\.id",
                @"@login_required",
                @"@permission_required",
                @"user\.has_perm\(",

                // JavaScript/Node.js Safe Patterns
                @"req\.user\.id",
                @"passport\.authenticate",
                @"isAuthenticated\(",
                @"checkOwnership\(",
                @"uuid\.v4\(\)",

                // PowerShell Safe Patterns
                @"ValidateSet\(",
                @"Parameter\(Mandatory\=\$true\)",
                @"-ErrorAction\s+(Stop|SilentlyContinue)",
                @"Test-Path\s",
                @"if\s*\(\s*-not\s",
                @"try\s*\{.*catch",
                @"-WhatIf",
                @"-Confirm"
            };
        }
    }
}
